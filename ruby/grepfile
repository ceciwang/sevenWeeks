The syntax of Ruby is broadly similar to Perl and Python. Class and method definitions are 
signaled by keywords. In contrast to Perl, variables are not obligatorily prefixed with a 
sigil. When used, the sigil changes the semantics of scope of the variable. One difference 
from C and Perl is that keywords are typically used to define logical code blocks, without
 braces (i.e., pair of { and }). For practical purposes there is no distinction between 
 expressions and statements.[36] Line breaks are significant and taken as the end of a 
 statement; a semicolon may be equivalently used. Unlike Python, indentation is not 
 significant.
One of the differences of Ruby compared to Python and Perl is that Ruby keeps all of its 
instance variables completely private to the class and only exposes them through accessor 
methods (attr_writer, attr_reader, etc.). Unlike the "getter" and "setter" methods of other
 languages like C++ or Java, accessor methods in Ruby are created with a single line of 
 code via metaprogramming. As invocation of these methods does not require the use of 
 parentheses, it is trivial to change an instance variable into a full function, without 
 modifying a single line of code or having to do any refactoring achieving similar 
 functionality to C# and VB.NET property members.
Python's property descriptors are similar, but come with a tradeoff in the development 
process. If one begins in Python by using a publicly exposed instance var
See the examples section for samples of code demonstrating Ruby syntax.